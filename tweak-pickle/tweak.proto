/* Protocol description for Cogent Tweak 2.
 *
 * Copyright (c) 2020-2022 Cogent Embedded, Inc.
 * ALL RIGHTS RESERVED.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

syntax = "proto3";
import "nanopb.proto";

package tweak_pb;

/* Variant value for transmission.
 */
message value {
  option (nanopb_msgopt).submsg_callback = true;
  oneof values {
    bool is_null = 1;

    bool scalar_bool = 2;

    sint32 scalar_sint8 = 3;

    /* Protobuf doesn't support 16-bit integer type */
    sint32 scalar_sint16 = 4;

    sint32 scalar_sint32 = 5;

    sint64 scalar_sint64 = 6;

    uint32 scalar_uint8 = 7;

    uint32 scalar_uint16 = 8;

    uint32 scalar_uint32 = 9;

    uint64 scalar_uint64 = 10;

    float scalar_float = 11;

    double scalar_double = 12;

    buffer_string string = 13;

    buffer_raw sint8_buffer = 14;

    buffer_sint16 sint16_buffer = 15;

    buffer_sint32 sint32_buffer = 16;

    buffer_sint64 sint64_buffer = 17;

    buffer_raw uint8_buffer = 18;

    buffer_uint16 uint16_buffer = 19;

    buffer_uint32 uint32_buffer = 20;

    buffer_uint64 uint64_buffer = 21;

    buffer_float fp32_buffer = 22;

    buffer_double fp64_buffer = 23;
  }
}

message buffer_string {
  string data = 1;
}

message buffer_raw {
  bytes data = 1;
}

message buffer_sint16 {
  repeated sint32 buffer = 2;
}

message buffer_sint32 {
  repeated sint32 buffer = 2;
}

message buffer_sint64 {
  repeated sint64 buffer = 2;
}

message buffer_uint16 {
  repeated uint32 buffer = 2;
}

message buffer_uint32 {
  repeated uint32 buffer = 2;
}

message buffer_uint64 {
  repeated uint64 buffer = 2;
}

message buffer_float {
  repeated float buffer = 2;
}

message buffer_double {
  repeated double buffer = 2;
}

/* A model is a flat list of these items.
 */
message add_item {
  /* Tweak id */
  uint64 tweak_id = 1;

  /* API references tweaks by this name */
  string uri = 2;

  /* Tweak current value */
  value current_value = 3;

  /* Detailed description */
  string description = 4;

  /* Representation details
     recognizable by GUI.
  */
  string meta = 5;

   /* Tweak default value */
  value default_value = 6;
}

/* Body of "subscribe" request.
 */
message subscribe {
  string uri_patterns = 1;
}

/* Body of singular change of tweak's current value.
   Can go from server endpoint to client or vice versa.
 */
message change_item {
  /* id provided by model.
   */
  uint64 tweak_id = 1;

  /* new value.
   */
  value value = 2;
}

/* Body of "remove item" request.
 */
message remove_item {
  /* Tweak id */
  uint64 tweak_id = 1;
}

/* Body of "announce_features" request.
 */
message announce_features {
  /* Comma separated list of features */
  string features = 1;
}

/* Envelope for messages being sent by client endpoint
   to server endpoint.
 */
message client_node_message {
  option (nanopb_msgopt).submsg_callback = true;

  oneof request {
    subscribe subscribe = 1;

    change_item change_item = 2;

    announce_features announce_features = 3;
  }
}

/* Envelope for messages being sent by server endpoint
   to client endpoint.
 */
message server_node_message {
  option (nanopb_msgopt).submsg_callback = true;

  oneof request {
    add_item add_item = 1;

    change_item change_item = 2;

    remove_item remove_item = 3;

    announce_features announce_features = 4;
  }
}
