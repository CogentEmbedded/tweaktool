#!/usr/bin/expect -f

# ##############################################################################
#
# Test fixture for command-line client of Cogent Tweak Tool.
#
# Copyright (c) 2022 Cogent Embedded, Inc. ALL RIGHTS RESERVED.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# ##############################################################################

set timeout 10
set TWEAK_APP_CL [lindex $argv 0]
set MOCK_SERVER [lindex $argv 1]
set LOG_DIR [lindex $argv 2]

set prompt "id : .+ >"

set port [expr {32769 + round(rand() * 20000)}]
set uri "tcp://0.0.0.0:$port"
set connection_type "nng"
set now [exec date +%Y-%m-%d-%H.%M.%S]

## Check for expected output to be valid
# param[in] arg Expected output
proc expect_output { arg1 } {
    expect {
        -regexp $arg1 { }
        timeout { error "" "\nTimeout on waiting for '$arg1'\n" }
    }
}

## Expect a command-line prompt
proc expect_prompt {} {
    global prompt

    expect {
        -re $prompt { }
        timeout { error "Error waiting for the prompt" }
    }
}

## Run a command but do not expect any output (yet)
proc run_command {command} {
    send "$command\r"
}

## Start the server with the selected connection_type, uri and port
proc run_server {} {
    global connection_type
    global uri
    global mock_server_spawn_id
    global MOCK_SERVER
    global LOG_DIR
    global argv0

    spawn $MOCK_SERVER -t $connection_type -u $uri -L $LOG_DIR/$argv0-tweak-mock-server.log
    set mock_server_spawn_id $spawn_id

    send_user "\nStarted $MOCK_SERVER: $mock_server_spawn_id\n"
}

# Stop the server and check it produces eof
proc stop_server {} {
    global mock_server_spawn_id
    global MOCK_SERVER

    set spawn_id $mock_server_spawn_id
    send \x03
    expect {
        eof { }
        timeout { exit 1 }
    }
    send_user "\nClosed $MOCK_SERVER: $mock_server_spawn_id\n"
}
